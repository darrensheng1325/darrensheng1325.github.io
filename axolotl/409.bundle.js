(()=>{"use strict";const e=2e3,t=2e3,a={common:{health:20,speed:.5,damage:5,probability:.4},uncommon:{health:40,speed:.75,damage:10,probability:.3},rare:{health:60,speed:1,damage:15,probability:.15},epic:{health:80,speed:1.25,damage:20,probability:.1},legendary:{health:100,speed:1.5,damage:25,probability:.04},mythic:{health:150,speed:2,damage:30,probability:.01}},o={},n=[],i=[],s=[],r=[];function d(){const o=Math.random();let n="common",i=0;for(const[e,t]of Object.entries(a))if(i+=t.probability,o<i){n=e;break}const s=a[n];return{id:Math.random().toString(36).substr(2,9),type:Math.random()<.5?"octopus":"fish",tier:n,x:Math.random()*e,y:Math.random()*t,angle:Math.random()*Math.PI*2,health:s.health,speed:s.speed,damage:s.damage}}function h(){const a=Math.random()<.3;return{id:Math.random().toString(36).substr(2,9),x:Math.random()*e,y:Math.random()*t,width:50+50*Math.random(),height:50+50*Math.random(),type:"coral",isEnemy:a,health:a?50:void 0}}function l(){return{id:Math.random().toString(36).substr(2,9),type:["health_potion","speed_boost","shield"][Math.floor(3*Math.random())],x:Math.random()*e,y:Math.random()*t}}const m=new class{constructor(){this.eventHandlers=new Map,this.id="player1",this.broadcast={emit:(e,t)=>{}}}on(e,t){this.eventHandlers.has(e)||this.eventHandlers.set(e,[]),this.eventHandlers.get(e)?.push(t)}emit(e,t){self.postMessage({type:"socketEvent",event:e,data:t})}getId(){return this.id}};self.onmessage=a=>{const{type:c,event:p,data:y}=a.data;switch(console.log("Worker received message:",c,y),c){case"init":!function(){console.log("Initializing game state in worker"),o[m.id]={id:m.id,x:1e3,y:1e3,angle:0,score:0,velocityX:0,velocityY:0,health:100,inventory:[]};for(let e=0;e<10;e++)n.push(d());for(let e=0;e<20;e++)i.push(h());for(let e=0;e<10;e++)s.push(l());for(let a=0;a<20;a++)r.push({x:Math.random()*e,y:Math.random()*t});console.log("Sending initial game state"),m.emit("currentPlayers",o),m.emit("enemiesUpdate",n),m.emit("obstaclesUpdate",i),m.emit("itemsUpdate",s),m.emit("playerMoved",o[m.id])}();break;case"socketEvent":switch(p){case"playerMovement":const a=o[m.id];if(a){let o=!1;for(const e of i)if(y.x<e.x+e.width&&y.x+40>e.x&&y.y<e.y+e.height&&y.y+40>e.y){o=!0;break}o||(a.x=Math.max(0,Math.min(e,y.x)),a.y=Math.max(0,Math.min(t,y.y)),a.angle=y.angle,a.velocityX=y.velocityX,a.velocityY=y.velocityY,m.emit("playerMoved",a))}break;case"collectItem":const n=s.findIndex((e=>e.id===y.itemId));if(-1!==n&&o[m.id].inventory.length<5){const e=s[n];o[m.id].inventory.push(e),s.splice(n,1),s.push(l()),m.emit("itemCollected",{playerId:m.id,itemId:y.itemId})}break;case"useItem":const r=o[m.id],d=r.inventory.findIndex((e=>e.id===y.itemId));if(-1!==d){const e=r.inventory[d];r.inventory.splice(d,1),"health_potion"===e.type&&(r.health=Math.min(r.health+50,100)),m.emit("itemUsed",{playerId:m.id,itemId:y.itemId})}}}},setInterval((()=>{var a,o;n.forEach((a=>{"octopus"===a.type?(a.x+=(4*Math.random()-2)*a.speed,a.y+=(4*Math.random()-2)*a.speed):(a.x+=2*Math.cos(a.angle)*a.speed,a.y+=2*Math.sin(a.angle)*a.speed),a.x=(a.x+e)%e,a.y=(a.y+t)%t,"fish"===a.type&&Math.random()<.02&&(a.angle=Math.random()*Math.PI*2)})),a="enemiesUpdate",o=n,self.postMessage({type:"socketEvent",event:a,data:o})}),100),self.onerror=e=>{console.error("Worker error:",e)}})();